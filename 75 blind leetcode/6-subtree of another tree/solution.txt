/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isidentical(TreeNode*root,TreeNode*subRoot)
    {
        if(!root && !subRoot)
        return true;
       // if((root && !subRoot) || (!root && subRoot))
       // the commented if or the following if (both are equivalent)
        if(!root || !subRoot)
        return false; 
    
        return root->val==subRoot->val &&isidentical(root->left,subRoot->left) &&isidentical(root->right,subRoot->right);
        // the above line or the below code
        /*
       if(root->val==subRoot->val)
        {
       bool x = isidentical(root->left,subRoot->left);
       bool y = isidentical(root->right,subRoot->right);
       return x && y ;
        }
        else
        return false;
         */
    }
    bool isSubtree(TreeNode* root, TreeNode* subRoot) 
    {
        if (!root && subRoot)
        return false;
        if(!subRoot)
        return true;


        
       return isidentical(root,subRoot)||isSubtree(root->right ,subRoot)||isSubtree(root->left ,subRoot);
        
        
          
         
          

        
    }
};