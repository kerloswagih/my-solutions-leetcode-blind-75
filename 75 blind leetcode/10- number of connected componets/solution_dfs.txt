class Solution {
public:
// time O(V+E)
// space O(V+E)
   void dfs_visit(vector<vector<int>> & adj,vector<bool> &visited,int u)
    {
        visited[u]= true ;

        for(auto v : adj[u])
        {
            if(!visited[v])
            dfs_visit(adj,visited,v);
        }

    }

    int countComponents(int n, vector<vector<int>>& edges) 
    {
     vector<vector<int>>adj(n);
     for(auto edge : edges )
     {
        int x = edge[0];
        int y = edge[1];
        adj[x].push_back(y);
        adj[y].push_back(x);
     }
     vector<bool> visited(n,false); 
      // the main dfs loop

      int count = 0;
      for(int u =0 ; u <n ;u++)
      {
        if(!visited[u]){
        dfs_visit(adj,visited,u);
        count++;
        }

      }
      return count;

    }

   
};
